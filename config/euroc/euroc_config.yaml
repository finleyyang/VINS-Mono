%YAML:1.0

#common parameters
#接受imu和image的topic，其中image_topic在节点/fature_tracker中被订阅，以进行角点的光流追踪，imu_topic在节点/vins_estimator中被订
#阅，以进行imu预积分
imu_topic: "/imu0"
image_topic: "/cam0/image_raw"
#output_path为输出文件的地址，输出vins的运动轨迹，相机与imu的外参估计“/extrinsic_parameter.csv” 注意如果该文件夹不存在则不输出
output_path: "/home/shaozu/output/"

#camera calibration
#相机的基础信息
#相机模型：PINHOLE（针孔模型）、KANNALA_BRANDT（鱼眼相机模型）
#图像的宽和高、相机的畸变参数（如果是鱼眼相机还要求mu、mv、u0、v0）、相机的内参
model_type: PINHOLE
camera_name: camera
image_width: 752
image_height: 480
distortion_parameters:
   k1: -2.917e-01
   k2: 8.228e-02
   p1: 5.333e-05
   p2: -1.578e-04
projection_parameters:
   fx: 4.616e+02
   fy: 4.603e+02
   cx: 3.630e+02
   cy: 2.481e+02

# Extrinsic parameter between IMU and Camera.
# imu与相机之间的外参
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 0  表示这外参已经是准确的了，之后不需要优化
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 1  表示外参只是一个估计值，后续还需要将其作为初始值放到非线性优化当中
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.
                        # 2  表示不知道外参，需要进行标定，在estimator.cpp的函数processImage()中调用了CalibrationExRotation()进行外参标定
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [0.0148655429818, -0.999880929698, 0.00414029679422,
           0.999557249008, 0.0149672133247, 0.025715529948, 
           -0.0257744366974, 0.00375618835797, 0.999660727178]
#Translation from camera frame to imu frame, imu^T_cam
extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [-0.0216401454975,-0.064676986768, 0.00981073058949]

#feature traker paprameters
#/feature_traker
max_cnt: 150            # max feature number in feature tracking
#max_cnt为进行特征光流追踪时保持的特征点数量具体在FeatureTracker::readImage()，通过当前帧成功跟踪的特征点数，计算是否需要提取新的特征点，如果需要则用过goodFeaturesToTrack()提取
min_dist: 30            # min distance between two features
#min_dist为两个相邻特征之间像素的最小间隔，目的是保证图像中均匀的特征分布。在FeatureTracker::setMask()中应用，该函数的作用是对跟踪点进行排序并去除密集点
#这个参数取大一些，比如30，可以保证图像的特征点分布非常均匀，有利于图像全局的光流跟踪；如果在特征明显的场合下可以适当取小一些，保证跟踪的特征都聚集在特征明显的地方。
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image
#freq控制图像跟踪的发布频率。在回调函数img_callback()中应用，通过判断判断间隔时间内的发布次数控制发布频率。一般根据相机的运行速度以及其他参数调完后的实时运行情况进行调整
F_threshold: 1.0        # ransac threshold (pixel)
#F_threshold为ransac算法的门限值，在FeatureTracker::rejectWithF()通过计算基本矩阵去除图像特征跟踪的外点时使用，一般不修改
show_track: 1           # publish tracking image as topic
#将经过特征跟踪的图像进行发布
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
#如果图片整体太暗或者太亮则需要进行直方图均衡化
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points
#鱼眼相机一般需要圆形的mask，以去除外部噪声点。mask图在config文件夹中

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
#最大迭代次数和最大迭代时间，以保证实时性
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)
#定义了关键帧的选择阈值。在FeatureManager::addFeatureCheckParallax()中通过计算每一个点跟踪次数和它在次新帧和次次新帧间的视差确定是否是关键帧。这个参数影响着算法中关键帧的个数

#imu parameters       The more accurate parameters you provide, the better performance
acc_n: 0.08          # accelerometer measurement noise standard deviation. #0.2   0.04
gyr_n: 0.004         # gyroscope measurement noise standard deviation.     #0.05  0.004
acc_w: 0.00004         # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 2.0e-6       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81007     # gravity magnitude
#imu的噪声的标准差以及重力加速度大小

#loop closure parameters
loop_closure: 1                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/shaozu/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 0                      # online estimate time offset between camera and imu
td: 0.0                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
